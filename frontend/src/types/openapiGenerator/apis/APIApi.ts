/* tslint:disable */
/* eslint-disable */
/**
 * Nyeoreumnagi Swagger
 * 녀름나기 REST API 문서
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomResponseBodyGetFcstRisk,
  CustomResponseBodyGetWeatherBriefing,
  CustomResponseBodyGetWeatherCondition,
  CustomResponseBodyGetWeatherGraph,
  CustomResponseBodyListGetMyWorksOfTodayResponse,
  CustomResponseBodyModifyMyWorkResponse,
  CustomResponseBodyRecommendWorksResponse,
  CustomResponseBodyRegisterMyWorkResponse,
  CustomResponseBodyVoid,
  DeleteMyWorkRequest,
  ModifyMyWorkRequest,
  RegisterMyWorkRequest,
} from '../models/index';
import {
    CustomResponseBodyGetFcstRiskFromJSON,
    CustomResponseBodyGetFcstRiskToJSON,
    CustomResponseBodyGetWeatherBriefingFromJSON,
    CustomResponseBodyGetWeatherBriefingToJSON,
    CustomResponseBodyGetWeatherConditionFromJSON,
    CustomResponseBodyGetWeatherConditionToJSON,
    CustomResponseBodyGetWeatherGraphFromJSON,
    CustomResponseBodyGetWeatherGraphToJSON,
    CustomResponseBodyListGetMyWorksOfTodayResponseFromJSON,
    CustomResponseBodyListGetMyWorksOfTodayResponseToJSON,
    CustomResponseBodyModifyMyWorkResponseFromJSON,
    CustomResponseBodyModifyMyWorkResponseToJSON,
    CustomResponseBodyRecommendWorksResponseFromJSON,
    CustomResponseBodyRecommendWorksResponseToJSON,
    CustomResponseBodyRegisterMyWorkResponseFromJSON,
    CustomResponseBodyRegisterMyWorkResponseToJSON,
    CustomResponseBodyVoidFromJSON,
    CustomResponseBodyVoidToJSON,
    DeleteMyWorkRequestFromJSON,
    DeleteMyWorkRequestToJSON,
    ModifyMyWorkRequestFromJSON,
    ModifyMyWorkRequestToJSON,
    RegisterMyWorkRequestFromJSON,
    RegisterMyWorkRequestToJSON,
} from '../models/index';

export interface DeleteMyWorkOperationRequest {
    deleteMyWorkRequest: DeleteMyWorkRequest;
}

export interface GetWeatherGraphRequest {
    weatherMetric: GetWeatherGraphWeatherMetricEnum;
}

export interface ModifyMyWorkOperationRequest {
    modifyMyWorkRequest: ModifyMyWorkRequest;
}

export interface RecommendWorksRequest {
    myCropId?: number;
}

export interface RegisterMyWorkOperationRequest {
    registerMyWorkRequest: RegisterMyWorkRequest;
}

/**
 * 
 */
export class APIApi extends runtime.BaseAPI {

    /**
     * 농작업 삭제
     */
    async deleteMyWorkRaw(requestParameters: DeleteMyWorkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomResponseBodyVoid>> {
        if (requestParameters['deleteMyWorkRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteMyWorkRequest',
                'Required parameter "deleteMyWorkRequest" was null or undefined when calling deleteMyWork().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/myWork`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteMyWorkRequestToJSON(requestParameters['deleteMyWorkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomResponseBodyVoidFromJSON(jsonValue));
    }

    /**
     * 농작업 삭제
     */
    async deleteMyWork(requestParameters: DeleteMyWorkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomResponseBodyVoid> {
        const response = await this.deleteMyWorkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 날씨 리스크 조회
     */
    async getFcstRiskResponseRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomResponseBodyGetFcstRisk>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/weather/fcstRisk`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomResponseBodyGetFcstRiskFromJSON(jsonValue));
    }

    /**
     * 날씨 리스크 조회
     */
    async getFcstRiskResponse(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomResponseBodyGetFcstRisk> {
        const response = await this.getFcstRiskResponseRaw(initOverrides);
        return await response.value();
    }

    /**
     * 오늘의 내 농작업 목록 조회
     */
    async getMyWorksOfTodayRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomResponseBodyListGetMyWorksOfTodayResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/myWork/today`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomResponseBodyListGetMyWorksOfTodayResponseFromJSON(jsonValue));
    }

    /**
     * 오늘의 내 농작업 목록 조회
     */
    async getMyWorksOfToday(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomResponseBodyListGetMyWorksOfTodayResponse> {
        const response = await this.getMyWorksOfTodayRaw(initOverrides);
        return await response.value();
    }

    /**
     * 날씨 브리핑 조회
     */
    async getWeatherBriefingResponseRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomResponseBodyGetWeatherBriefing>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/weather/briefing`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomResponseBodyGetWeatherBriefingFromJSON(jsonValue));
    }

    /**
     * 날씨 브리핑 조회
     */
    async getWeatherBriefingResponse(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomResponseBodyGetWeatherBriefing> {
        const response = await this.getWeatherBriefingResponseRaw(initOverrides);
        return await response.value();
    }

    /**
     * 날씨 요약 조회
     */
    async getWeatherConditionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomResponseBodyGetWeatherCondition>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/weather/now`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomResponseBodyGetWeatherConditionFromJSON(jsonValue));
    }

    /**
     * 날씨 요약 조회
     */
    async getWeatherCondition(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomResponseBodyGetWeatherCondition> {
        const response = await this.getWeatherConditionRaw(initOverrides);
        return await response.value();
    }

    /**
     * 날씨 그래프 조회
     */
    async getWeatherGraphRaw(requestParameters: GetWeatherGraphRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomResponseBodyGetWeatherGraph>> {
        if (requestParameters['weatherMetric'] == null) {
            throw new runtime.RequiredError(
                'weatherMetric',
                'Required parameter "weatherMetric" was null or undefined when calling getWeatherGraph().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['weatherMetric'] != null) {
            queryParameters['weatherMetric'] = requestParameters['weatherMetric'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/weather`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomResponseBodyGetWeatherGraphFromJSON(jsonValue));
    }

    /**
     * 날씨 그래프 조회
     */
    async getWeatherGraph(requestParameters: GetWeatherGraphRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomResponseBodyGetWeatherGraph> {
        const response = await this.getWeatherGraphRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 농작업 수정
     */
    async modifyMyWorkRaw(requestParameters: ModifyMyWorkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomResponseBodyModifyMyWorkResponse>> {
        if (requestParameters['modifyMyWorkRequest'] == null) {
            throw new runtime.RequiredError(
                'modifyMyWorkRequest',
                'Required parameter "modifyMyWorkRequest" was null or undefined when calling modifyMyWork().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/myWork`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyMyWorkRequestToJSON(requestParameters['modifyMyWorkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomResponseBodyModifyMyWorkResponseFromJSON(jsonValue));
    }

    /**
     * 농작업 수정
     */
    async modifyMyWork(requestParameters: ModifyMyWorkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomResponseBodyModifyMyWorkResponse> {
        const response = await this.modifyMyWorkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 내 작물의 생육 단계와 날씨를 고려한 농작업 추천 목록 조회
     */
    async recommendWorksRaw(requestParameters: RecommendWorksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomResponseBodyRecommendWorksResponse>> {
        const queryParameters: any = {};

        if (requestParameters['myCropId'] != null) {
            queryParameters['myCropId'] = requestParameters['myCropId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/work/recommendation`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomResponseBodyRecommendWorksResponseFromJSON(jsonValue));
    }

    /**
     * 내 작물의 생육 단계와 날씨를 고려한 농작업 추천 목록 조회
     */
    async recommendWorks(requestParameters: RecommendWorksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomResponseBodyRecommendWorksResponse> {
        const response = await this.recommendWorksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 농작업 등록
     */
    async registerMyWorkRaw(requestParameters: RegisterMyWorkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomResponseBodyRegisterMyWorkResponse>> {
        if (requestParameters['registerMyWorkRequest'] == null) {
            throw new runtime.RequiredError(
                'registerMyWorkRequest',
                'Required parameter "registerMyWorkRequest" was null or undefined when calling registerMyWork().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/myWork`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterMyWorkRequestToJSON(requestParameters['registerMyWorkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomResponseBodyRegisterMyWorkResponseFromJSON(jsonValue));
    }

    /**
     * 농작업 등록
     */
    async registerMyWork(requestParameters: RegisterMyWorkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomResponseBodyRegisterMyWorkResponse> {
        const response = await this.registerMyWorkRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetWeatherGraphWeatherMetricEnum = {
    Percipitation: 'PERCIPITATION',
    Temperature: 'TEMPERATURE',
    Humidity: 'HUMIDITY',
    WindSpeed: 'WIND_SPEED'
} as const;
export type GetWeatherGraphWeatherMetricEnum = typeof GetWeatherGraphWeatherMetricEnum[keyof typeof GetWeatherGraphWeatherMetricEnum];
