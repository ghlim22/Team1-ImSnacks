name: Blue-Green deployment

on:
  push:
    branches:
      - be

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 레포지토리의 특정 브랜치, 커밋을 가져오는 설정
      # Github Action 라이브러리인 actions/checkout@v3 액션을 사용
      - uses: actions/checkout@v3

      # JDK 셋업
      # Github Action 라이브러리인 actions/setup-java@v3 액션을 사용
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle 빌드에 필요한 데이터를 캐싱하여 빌드 속도를 향상시키는 설정
      # Github Action 라이브러리인 actions/cache 액션을 사용
      # Gradle 캐시에 의존성, 래퍼 등을 빌드할 때 저장해두었다가 나중에 재빌드할 때 재사용해서 속도를 향상
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/backend/.gradle/caches
            ~/backend/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-

      # gradle 파일에 접근할 권한을 부여
      - name: Run chmod to make gradlew executable
        run: chmod +x ./backend/gradlew

      # build 작업 수행
      - name: Build with Gradle Wrapper
        run: ./backend/gradlew build

      # docker image를 build 하고 docker hub에 push
      - name: Docker Build and Push
        run: |
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          sudo docker build -f ./.deploy/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }} .
          sudo docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # DockerHub에 로그인
      # GitHub Action 라이브러리 사용
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # .env 파일에 환경 변수 값들 집어넣기 (Github Secret 에 저장한 정보를 .env 파일로 echo)
      # 그리고 Blue-Green 배포 스크립트인 deploy.sh 실행
      - name: Run a New Version of the the application on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd ~/backend/.deploy
            rm -rf ./.env
            touch ./.env
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> ./.env
            echo "DOCKER_REPOSITORY=${{ secrets.DOCKER_REPOSITORY }}" >> ./.env
            chmod +x deploy.sh
            source deploy.sh